apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName rootProject.versionName
        versionCode rootProject.versionCode
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }


    sourceSets {
        test {
            resources.srcDirs += ['src/test/res']
        }
        androidTest {
            resources.srcDirs += ['src/androidTest/res']
        }
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguard.cfg'
        }

        release {
            debuggable false
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguard.cfg', '../proguard-gson.cfg', '../proguard-simplexml.cfg'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "tier"
    productFlavors {

        production {
        }

        beta {
            applicationIdSuffix '.beta'
        }

    }

    lintOptions {
        disable 'MissingTranslation'
        // Don't abort if Lint finds an error, otherwise the Jenkins build
        // will be marked as failed, and Jenkins won't analyse the Lint output
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    dependencies {
        implementation 'androidx.appcompat:appcompat:1.0.2'
        implementation 'com.google.android.material:material:1.1.0-alpha09'
        implementation 'androidx.preference:preference:1.0.0'
        implementation 'androidx.cardview:cardview:1.0.0'
        implementation 'androidx.gridlayout:gridlayout:1.0.0'
        implementation 'androidx.annotation:annotation:1.1.0'
        implementation 'com.google.firebase:firebase-core:17.1.0'
        implementation 'com.google.firebase:firebase-analytics:17.1.0'
        //noinspection GradleDependency
        implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.12.3'
        //noinspection GradleDependency
        implementation 'com.squareup.okhttp3:logging-interceptor:3.12.3'
        implementation 'com.google.code.gson:gson:2.8.5'
        implementation 'org.apache.commons:commons-lang3:3.7'
        implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.2'
        implementation 'com.squareup.retrofit2:retrofit:2.6.1'
        implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0-alpha03"
        implementation "androidx.lifecycle:lifecycle-extensions:2.2.0-alpha03"
        implementation "androidx.lifecycle:lifecycle-common-java8:2.2.0-alpha03"
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'
        implementation('com.squareup.picasso:picasso:2.71828') {
            exclude group: 'com.android.support'
            exclude module: ['exifinterface', 'support-annotations']
        }
        implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
        implementation 'androidx.multidex:multidex:2.0.1'

        implementation group: 'com.tickaroo.tikxml', name: 'core', version: '0.8.13'
        implementation group: 'com.tickaroo.tikxml', name: 'annotation', version: '0.8.13'
        implementation 'com.tickaroo.tikxml:retrofit-converter:0.8.13'
        kapt 'com.tickaroo.tikxml:processor:0.8.13'


        testImplementation 'junit:junit:4.12'
        androidTestImplementation 'commons-io:commons-io:2.6'
        androidTestImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '3.6.0'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
        androidTestImplementation 'androidx.test.ext:junit:1.1.1'
        androidTestImplementation 'androidx.test:runner:1.2.0'
        androidTestImplementation 'androidx.test:rules:1.2.0'
    }

}

Properties props = new Properties()
def propFile = file('../keystore/signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}
apply plugin: 'com.google.gms.google-services'